name: Code Coverage (llvm-cov)

on:
  schedule:
    - cron: "0 1 * * *" # every day at 1am (UTC)
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  llvm-cov:
    name: Generate code coverage
    runs-on: self-hosted
    timeout-minutes: 180
    env:
      CARGO_TERM_COLOR: always
    steps:
      # can be removed when actions are available on the image already
      - name: Update Rust toolchain
        run: rustup update stable
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # pin@v4
      - uses: bmwill/rust-cache@fb63fcd7a959767755b88b5af2f5cbf65fb8a127 # pin@v1

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@125e82eef6e60d2b0c20d4d1f4cf81db37f68bf3 # pin@cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@7e58f89e24a544d88f7a74c6eed8a3df3fd4c658 # pin@nextest

      - name: Set Swap Space
        uses: actionhippie/swap-space@v1
        with:
          size: 256G

      - name: Compute code coverage and create report (nextest.info)
        run: |
          cargo llvm-cov clean --profraw-only
          TOOLCHAIN=$(rustup show active-toolchain | awk '{print $1}')
          rustup component add llvm-tools --toolchain "$TOOLCHAIN"
          LLVM_PROFDATA="$HOME/.rustup/toolchains/$TOOLCHAIN/lib/rustlib/x86_64-unknown-linux-gnu/bin/llvm-profdata"
          if [[ -x "$LLVM_PROFDATA" ]]; then
            $LLVM_PROFDATA --version
          else
            echo "Error: llvm-profdata not found or not executable at $LLVM_PROFDATA"
            exit 1
          fi
          set +e
          IOTA_SKIP_SIMTESTS=1 cargo llvm-cov --ignore-run-fail --no-report nextest -vv
          find target/llvm-cov-target -name '*.profraw' | while read file; do
            if ! "$LLVM_PROFDATA" show "$file" > /dev/null 2>&1; then
                echo "Removing corrupted file: $file"
                rm "$file"
            fi
          done
          cargo llvm-cov report --lcov --output-path target/nextest.info
          if [ -f "target/nextest.info" ]; then
            echo "Nextest coverage created."
            exit 0
          else
            echo "Fatal Error: Failed to create nextest coverage report."
            exit 1
          fi

      - name: Compute code coverage and create report (simtest.info)
        run: |
          cargo llvm-cov clean --profraw-only
          git clean -fd
          set +e
          ./scripts/simtest/simtest-cov.sh
          if [ -f "target/simtest.info" ]; then
            echo "Simtest coverage created."
            exit 0
          else
            echo "Fatal Error: Failed to create simtest coverage report."
            exit 1
          fi

      - name: Create combined html report (report.tgz)
        run: |
          if ! command -v lcov &> /dev/null; then 
            apt install -y lcov 
          fi
          cd target || exit 1
          if [ -d "report" ]; then
            rm -rf report
          fi
          genhtml -o report nextest.info simtest.info
          tar -czvf report.tgz report

      - name: Publish html report and trigger update
        run: |
          cd target || exit 1
          rsync -av report.tgz ${{ secrets.CODEGOV_REPORT_HOST }}:transfer/cargo-llvm-cov/
          ssh ${{ secrets.CODEGOV_REPORT_HOST }}

      - name: Backup html report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # pin@v4
        with:
          name: report
          path: target/report.tgz
          if-no-files-found: error
          retention-days: 30
