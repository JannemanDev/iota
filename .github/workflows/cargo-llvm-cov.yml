name: Code Coverage (llvm-cov)

on:
  schedule:
    - cron: "0 1 * * *" # UTC timing is every day at 1am UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  llvm-cov:
    name: Generate code coverage (llvm-cov)
    runs-on: [self-hosted]
    timeout-minutes: 120
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # pin@v4
      - uses: bmwill/rust-cache@fb63fcd7a959767755b88b5af2f5cbf65fb8a127 # pin@v1

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@125e82eef6e60d2b0c20d4d1f4cf81db37f68bf3 # pin@cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@7e58f89e24a544d88f7a74c6eed8a3df3fd4c658 # pin@nextest

      - name: Update Rust toolchain
        run: rustup update stable

      - name: Generate code coverage (nextest)
        run: |
          cargo llvm-cov clean
          RUSTFLAGS="-C debuginfo=0" IOTA_SKIP_SIMTESTS=1 cargo llvm-cov --ignore-run-fail --html nextest -vv -E '!package(iota-bridge)'

      - name: Create compressed archive
        run: |
          tar -czf nextest_coverage_report.tgz target/llvm-cov/html/

      # Temporarily disabled until sim tests are no longer segfaulting
      # - name: Run code coverage (simtest)
      #   run: |
      #     git clean -fd
      #     ./scripts/simtest/codecov.sh

      # - name: Create compressed archive
      #   run: |
      #     tar -czf simtest_coverage_report.tgz target/llvm-cov/html/
